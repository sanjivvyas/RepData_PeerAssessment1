`001` <- read.csv("C:/Users/Vyas2/Desktop/Coursera/specdata/001.csv")
View(`001`)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makecacheMatrix(x)
m = makeCacheMatrix(x)
get()
?get()
get(m)
mget()
m$get()
$get()
m$get()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
cacheSolve(m)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
install.packages("swirl")
R.version.string
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
z, 555, z
d(z,555,z)
?d(z,555,z)
(z,555,z)
?(z,555,z)
d <- (z,555,z)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
swirl()
library(swirl)
install_from_swirl("Sequences of Numbers")
swirl()
swirl()
swirl()
> library(swirl)
> install_from_swirl("Data Analysis")
library(swirl)
install_from_swirl("Data Analysis")
swirl()
nxt()
nxt()
cars
?dataset$variable
dataset$variable
cars$mpgcity
?cars$mpgcity
info()
?'cars'$'mpgcity'
bye()
q()
library(swirl)
swirl()
car(mpgcity)
cars(mpgcity)
?cars(mpgcity)
data(cars)
info()
info(dataset)
?data(cars.mpeg)
require(utils)
data()
help(dataset)
??dataset
data(cars$mpgcity)
View(`001`)
bye()
library(swirl)
swirl()
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
mode(myMPG)
table(myMPG)
19
swirl()
swirl()
swirl()
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
swirl()
swirl()
q
q
q()
library(swirl)
rm(list=ls())
swirl()
num_vect(0.5,55,-10,6)
num_vect <- c(0.5,55,-10.6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
c(my_char,"Sanjiv")
my_name <- c(my_char, "Sanjiv")
my_name
paste(my_name, collapse = " ")
paste("Hello","world",sep = " ")
paste("Hello","world!",sep = " ")
paste(1:3,c("x","y","z"),sep="")
paste(1:3, c("x","y","z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is_na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[300]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20,4,5,byrow=FALSE,dimnames=NULL)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina","Kelly", "sean")
patients <- c("Bill", "Gina", "Kelly", "sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age","weight", "bp", "rating", "test")
colnames(my_data) <- c("patient", "age","weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
q
q()
q()
library(swirl)
swirl()
top_unique
arrange(by_package, desc(unique))
top_unique <- arrange(by_package, unique)
by_package
arrange(top_unique, desc(unique))
skip()
swirl()
arrange(top_unique, desc(unique))
by_package
pack_sum
info()
skip()
nxt()
swirl()
top_unique <- filter(pack_sum, unique > 465)
arrange(top_unique, desc(unique))
submit()
submit()
submit()
cran %>%
select() %>%
print
cran %>%
select() %>%
print
print()
print
cran %>%
select() %>%
print
script_vals_identical()
source('C:/Users/Vyas2/AppData/Local/Temp/Rtmp2h9bqf/chain1.R')
source('C:/Users/Vyas2/AppData/Local/Temp/Rtmp2h9bqf/chain1.R')
source('C:/Users/Vyas2/AppData/Local/Temp/Rtmp2h9bqf/summarize4.R')
source('C:/Users/Vyas2/AppData/Local/Temp/Rtmp2h9bqf/summarize3.R')
source('C:/Users/Vyas2/AppData/Local/Temp/Rtmp2h9bqf/summarize2.R')
cran %>%
select() %>%
print
chain1.R
q()
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
cran %>%
select(ip_id) %>%
print
cran %>%
select (country) %>%
print
cran %>%
select(package)
cran %>%
select(size)
print
cran %>%
select(ip_id, country, package, size)
cran %>%
select(ip_id) %>%
print
cran %>%
select(Country) %>%
print
cran %>%
select(country) %>%
print
cran %>%
select(ip_id, country, package, size) %>%
print
q()
source('~/Coursera/Exploratory_DA/run_analysis.R')
source('~/Coursera/Exploratory_DA/run_analysis.R')
source('~/Coursera/Exploratory_DA/run_analysis.R')
download.file(fileUrl, destfile = "Dataset.zip", method = "curl")
download.file(fileUrl, destfile = "Dataset.zip")
source('~/Coursera/Exploratory_DA/run_analysis.R')
source('~/Coursera/Exploratory_DA/run_analysis.R')
source('~/Coursera/Exploratory_DA/run_analysis.R')
source('~/Coursera/Exploratory_DA/run_analysis.R')
source('~/Coursera/Exploratory_DA/run_analysis2.R')
source('~/Coursera/Exploratory_DA/run_analysis2.R')
?colnames()
m0 <- matrix(NA, 4, 0)
rownames(m0)
m2 <- cbind(1, 1:4)
colnames(m2, do.NULL = FALSE)
colnames(m2) <- c("x","Y")
rownames(m2) <- rownames(m2, do.NULL = FALSE, prefix = "Obs.")
m2
source('~/Coursera/Exploratory_DA/run_analysis2.R')
source('~/Coursera/Exploratory_DA/run_analysis2.R')
source('~/Coursera/Exploratory_DA/run_analysis2.R')
source('~/Coursera/Exploratory_DA/run_analysis2.R')
source('~/Coursera/Exploratory_DA/run_analysis.R')
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
agricultureLogical <- dt$ACR == 3 & dt$AGS == 6
which(agricultureLogical)[1:3]
packages <- c("data.table", "jpeg")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
??jpeg
install.packages("jpeg",dependencies)
??install.packages
install.packages("jpeg")
packages <- c("data.table", "jpeg")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
agricultureLogical <- dt$ACR == 3 & dt$AGS == 6
which(agricultureLogical)[1:3]
https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
https:\\d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
https:/d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
https:\d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
students
?gather
gather(students, sex, count, -grade)
student2
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate()
?separate
separate(res, sex_class, c("sex", "class"))
students2 %>%
gather(students, sex, count, -grade) %>%
res <- gather(students2, sex_class, count, -grade)
quit()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
?manipulate
??manipulate
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
ww <- sum(w)
b <-2*t(x) %*% w
b/2/ww
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
s <- lm(y ~x-1)
coef(s)
data(mtcars)
y<- mtcars$mpg
x <- mtcars$wt
coef(lm(y~x))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y~x))
0.51/0.5
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl)*wt, mtcars)
summary(fit3)
pnorm(70, mean = 80, sd = 10)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75/sqrt(100))
pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE)
pnorm(16, mean = 15, sd = 1) - pnorm(14, mean = 15, sd = 1)
ppois(10, lambda = 15)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbetas(fit)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
# To compare model we usually use an anova table
# anova null hypothesis says that both models are the same.
compare <- anova(fit1, fit2)
compare$Pr
N = 9
mean = 1100
sd = 30
error = qt(0.975, df = N-1) * sd / sqrt(N)
ans = mean + c(-1,1) * error
round(ans)
N = 9
mean = -2
# error = qt(0.95,df = 9)*sd/sqrt(N-1) = 2
ans = 2 * sqrt(N) / qt(0.975, df = N-1)
round(ans, 2)
nx = 10
ny = 10
mx = 3
my = 5
Sx2 = 0.6
Sy2 = 0.68
Sr = sqrt(((nx-1)*Sx2+(ny-1)*Sy2)/(nx+ny-2))
ans = mx - my + c(-1,1) * qt(0.975, df = nx + ny - 2) * Sr * sqrt(1/nx+1/ny)
round(ans, 2)
nx = 100
ny = 100
mx = 4
my = 6
Sx2 = 0.5
Sy2 = 2
Sr = sqrt(((nx-1)*Sx2+(ny-1)*Sy2)/(nx+ny-2))
ans = my - mx + c(-1,1) * qt(0.975, df = nx + ny - 2) * Sr * sqrt(1/nx+1/ny)
round(ans, 2)
ans
nD = 9
nP = 9
mD = -3
mP = 1
sD = 1.5
sP = 1.8
Sr = sqrt(((nD-1)*sD^2+(nP-1)*sP^2)/(nD+nD-2))
ans = mD - mP + c(-1,1) * qt(0.9, df = nD + nP - 2) * Sr * sqrt(1/nD+1/nP)
ans
setwd("~/GitHub/RepData_PeerAssessment1")
